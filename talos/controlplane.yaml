version: v1alpha1
debug: false
persist: true
machine:
    type: controlplane
    token: t3bg86.eakw5ywsrxx9d8zw
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJQekNCOHFBREFnRUNBaEVBbU5wTVlQZHVmQUMvTHZuaXB4T0JZVEFGQmdNclpYQXdFREVPTUF3R0ExVUUKQ2hNRmRHRnNiM013SGhjTk1qUXhNVEl5TVRrd01EQXdXaGNOTXpReE1USXdNVGt3TURBd1dqQVFNUTR3REFZRApWUVFLRXdWMFlXeHZjekFxTUFVR0F5dGxjQU1oQUVNOGhoTEl3N0FuMDFTUjNtVUhzZk9UK2c2WDJnZnZzOFBSCjNsZlU0cVpmbzJFd1h6QU9CZ05WSFE4QkFmOEVCQU1DQW9Rd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkxNaVdBdWZyNlN1U1dqQQppdDFuVmxVM3JoOXNNQVVHQXl0bGNBTkJBS1E5WHZhNndHK0M2TTZhN21KenhmaU91eVlCOTEvM2VuZ2dZWVBlCm00aGN2QUozbFVFSGtCR29oT2xwVGcvbzJiN1VYeVlwL1U3TEJDdVd2MU9kcFF3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0KTUM0Q0FRQXdCUVlESzJWd0JDSUVJTHpaVmo4TVUzODBOU1BrTjIrbmtGeFN5L241RSt1ZHhYQ3BMdG9MTU9pbAotLS0tLUVORCBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0K
    certSANs: []

    kubelet:
        image: ghcr.io/siderolabs/kubelet:v1.31.2 
        defaultRuntimeSeccompProfileEnabled: true 
        disableManifestsDirectory: true 
        
        # # The `ClusterDNS` field is an optional reference to an alternative kubelet clusterDNS ip list.
        # clusterDNS:
        #     - 10.96.0.10
        #     - 169.254.2.53

        # # The `extraArgs` field is used to provide additional flags to the kubelet.
        # extraArgs:
        #     key: value

        extraMounts:
            - destination: /var/mnt
              type: bind
              source: /var/mnt
              options:
                - bind
                - rshared
                - rw

        # # The `extraConfig` field is used to provide kubelet configuration overrides.
        # extraConfig:
        #     serverTLSBootstrap: true

        # # The `KubeletCredentialProviderConfig` field is used to provide kubelet credential configuration.
        # credentialProviderConfig:
        #     apiVersion: kubelet.config.k8s.io/v1
        #     kind: CredentialProviderConfig
        #     providers:
        #         - apiVersion: credentialprovider.kubelet.k8s.io/v1
        #           defaultCacheDuration: 12h
        #           matchImages:
        #             - '*.dkr.ecr.*.amazonaws.com'
        #             - '*.dkr.ecr.*.amazonaws.com.cn'
        #             - '*.dkr.ecr-fips.*.amazonaws.com'
        #             - '*.dkr.ecr.us-iso-east-1.c2s.ic.gov'
        #             - '*.dkr.ecr.us-isob-east-1.sc2s.sgov.gov'
        #           name: ecr-credential-provider

        # # The `nodeIP` field is used to configure `--node-ip` flag for the kubelet.
        # nodeIP:
        #     # The `validSubnets` field configures the networks to pick kubelet node IP from.
        #     validSubnets:
        #         - 10.0.0.0/8
        #         - '!10.0.0.3/32'
        #         - fdc7::/16
    network: {}
    # # `interfaces` is used to define the network interface configuration.
    # interfaces:
    #     - interface: enp0s1 # The interface name.
    #       # Assigns static IP addresses to the interface.
    #       addresses:
    #         - 192.168.2.0/24
    #       # A list of routes associated with the interface.
    #       routes:
    #         - network: 0.0.0.0/0 # The route's network (destination).
    #           gateway: 192.168.2.1 # The route's gateway (if empty, creates link scope route).
    #           metric: 1024 # The optional metric for the route.
    #       mtu: 1500 # The interface's MTU.
    #       
    #       # # Picks a network device using the selector.

    #       # # select a device with bus prefix 00:*.
    #       # deviceSelector:
    #       #     busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       # # select a device with mac address matching `*:f0:ab` and `virtio` kernel driver.
    #       # deviceSelector:
    #       #     hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #     driver: virtio # Kernel driver, supports matching by wildcard.
    #       # # select a device with bus prefix 00:*, a device with mac address matching `*:f0:ab` and `virtio` kernel driver.
    #       # deviceSelector:
    #       #     - busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       #     - hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #       driver: virtio # Kernel driver, supports matching by wildcard.

    #       # # Bond specific options.
    #       # bond:
    #       #     # The interfaces that make up the bond.
    #       #     interfaces:
    #       #         - enp2s0
    #       #         - enp2s1
    #       #     # Picks a network device using the selector.
    #       #     deviceSelectors:
    #       #         - busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       #         - hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #           driver: virtio # Kernel driver, supports matching by wildcard.
    #       #     mode: 802.3ad # A bond option.
    #       #     lacpRate: fast # A bond option.

    #       # # Bridge specific options.
    #       # bridge:
    #       #     # The interfaces that make up the bridge.
    #       #     interfaces:
    #       #         - enxda4042ca9a51
    #       #         - enxae2a6774c259
    #       #     # A bridge option.
    #       #     stp:
    #       #         enabled: true # Whether Spanning Tree Protocol (STP) is enabled.

    #       # # Indicates if DHCP should be used to configure the interface.
    #       # dhcp: true

    #       # # DHCP specific options.
    #       # dhcpOptions:
    #       #     routeMetric: 1024 # The priority of all routes received via DHCP.

    #       # # Wireguard specific configuration.

    #       # # wireguard server example
    #       # wireguard:
    #       #     privateKey: ABCDEF... # Specifies a private key configuration (base64 encoded).
    #       #     listenPort: 51111 # Specifies a device's listening port.
    #       #     # Specifies a list of peer configurations to apply to a device.
    #       #     peers:
    #       #         - publicKey: ABCDEF... # Specifies the public key of this peer.
    #       #           endpoint: 192.168.1.3 # Specifies the endpoint of this peer entry.
    #       #           # AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
    #       #           allowedIPs:
    #       #             - 192.168.1.0/24
    #       # # wireguard peer example
    #       # wireguard:
    #       #     privateKey: ABCDEF... # Specifies a private key configuration (base64 encoded).
    #       #     # Specifies a list of peer configurations to apply to a device.
    #       #     peers:
    #       #         - publicKey: ABCDEF... # Specifies the public key of this peer.
    #       #           endpoint: 192.168.1.2:51822 # Specifies the endpoint of this peer entry.
    #       #           persistentKeepaliveInterval: 10s # Specifies the persistent keepalive interval for this peer.
    #       #           # AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
    #       #           allowedIPs:
    #       #             - 192.168.1.0/24

    #       # # Virtual (shared) IP address configuration.

    #       # # layer2 vip example
    #       # vip:
    #       #     ip: 172.16.199.55 # Specifies the IP address to be used.

    #nameservers:
    #     - 1.1.1.1 
    #     - 8.8.8.8

    # # Allows for extra entries to be added to the `/etc/hosts` file
    # extraHostEntries:
    #     - ip: 192.168.1.100 # The IP of the host.
    #       # The host alias.
    #       aliases:
    #         - example
    #         - example.domain.tld

    install:
        disk: /dev/sdb 
        image: ghcr.io/siderolabs/installer:v1.8.3
        wipe: true
        
    registries: {}
    # # Specifies mirror configuration for each registry host namespace.
    # mirrors:
    #     ghcr.io:
    #         # List of endpoints (URLs) for registry mirrors to use.
    #         endpoints:
    #             - https://registry.insecure
    #             - https://ghcr.io/v2/

    # # Specifies TLS & auth configuration for HTTPS image registries.
    # config:
    #     registry.insecure:
    #         # The TLS configuration for the registry.
    #         tls:
    #             insecureSkipVerify: true # Skip TLS server certificate verification (not recommended).
    #             
    #             # # Enable mutual TLS authentication with the registry.
    #             # clientIdentity:
    #             #     crt: LS0tIEVYQU1QTEUgQ0VSVElGSUNBVEUgLS0t
    #             #     key: LS0tIEVYQU1QTEUgS0VZIC0tLQ==
    #         
    #         # # The auth configuration for this registry.
    #         # auth:
    #         #     username: username # Optional registry authentication.
    #         #     password: password # Optional registry authentication.

    features:
        rbac: true.
        stableHostname: true # Enable stable default hostname.
        apidCheckExtKeyUsage: true # Enable checks for extended key usage of client certificates in apid.
        diskQuotaSupport: true # Enable XFS project quota support for EPHEMERAL partition and user disks.
        # KubePrism - local proxy/load balancer on defined port that will distribute
        kubePrism:
            enabled: true # Enable KubePrism support - will start local load balancing proxy.
            port: 7445 # KubePrism port.
        # Configures host DNS caching resolver.
        hostDNS:
            enabled: true # Enable host DNS caching resolver.
            forwardKubeDNSToHost: true # Use the host DNS resolver as upstream for Kubernetes CoreDNS pods.
        
        # # Configure Talos API access from Kubernetes pods.
        # kubernetesTalosAPIAccess:
        #     enabled: true # Enable Talos API access from Kubernetes pods.
        #     # The list of Talos API roles which can be granted for access from Kubernetes pods.
        #     allowedRoles:
        #         - os:reader
        #     # The list of Kubernetes namespaces Talos API access is available from.
        #     allowedKubernetesNamespaces:
        #         - kube-system
    # Configures the node labels for the machine.
    nodeLabels:
        node.kubernetes.io/exclude-from-external-load-balancers: ""
    
    # # Provides machine specific control plane configuration options.

    # # ControlPlane definition example.
    # controlPlane:
    #     # Controller manager machine specific configuration options.
    #     controllerManager:
    #         disabled: false # Disable kube-controller-manager on the node.
    #     # Scheduler machine specific configuration options.
    #     scheduler:
    #         disabled: true # Disable kube-scheduler on the node.

    # # Used to provide static pod definitions to be run by the kubelet directly bypassing the kube-apiserver.

    # # nginx static pod.
    # pods:
    #     - apiVersion: v1
    #       kind: pod
    #       metadata:
    #         name: nginx
    #       spec:
    #         containers:
    #             - image: nginx
    #               name: nginx

    # # Used to partition, format and mount additional disks.

    # # MachineDisks list example.
    # disks:
    #     - device: /dev/sdb # The name of the disk to use.
    #       # A list of partitions to create on the disk.
    #       partitions:
    #         - mountpoint: /var/mnt/extra # Where to mount the partition.
    #           
    #           # # The size of partition: either bytes or human readable representation. If `size:` is omitted, the partition is sized to occupy the full disk.

    #           # # Human readable representation.
    #           # size: 100 MB
    #           # # Precise value in bytes.
    #           # size: 1073741824

    # # Allows the addition of user specified files.

    # # MachineFiles usage example.
    # files:
    #     - content: '...' # The contents of the file.
    #       permissions: 0o666 # The file's permissions in octal.
    #       path: /tmp/file.txt # The path of the file.
    #       op: append # The operation to use

    # # The `env` field allows for the addition of environment variables.

    # # Environment variables definition examples.
    # env:
    #     GRPC_GO_LOG_SEVERITY_LEVEL: info
    #     GRPC_GO_LOG_VERBOSITY_LEVEL: "99"
    #     https_proxy: http://SERVER:PORT/
    # env:
    #     GRPC_GO_LOG_SEVERITY_LEVEL: error
    #     https_proxy: https://USERNAME:PASSWORD@SERVER:PORT/
    # env:
    #     https_proxy: http://DOMAIN\USERNAME:PASSWORD@SERVER:PORT/

    # # Used to configure the machine's time settings.

    # # Example configuration for cloudflare ntp server.
    # time:
    #     disabled: false # Indicates if the time service is disabled for the machine.
    #     # description: |
    #     servers:
    #         - time.cloudflare.com
    #     bootTimeout: 2m0s # Specifies the timeout when the node time is considered to be in sync unlocking the boot sequence.

    # # Used to configure the machine's sysctls.

    # # MachineSysctls usage example.
    # sysctls:
    #     kernel.domainname: talos.dev
    #     net.ipv4.ip_forward: "0"
    #     net/ipv6/conf/eth0.100/disable_ipv6: "1"

    # # Used to configure the machine's sysfs.

    # # MachineSysfs usage example.
    # sysfs:
    #     devices.system.cpu.cpu0.cpufreq.scaling_governor: performance

    # # Machine system disk encryption configuration.
    # systemDiskEncryption:
    #     # Ephemeral partition encryption.
    #     ephemeral:
    #         provider: luks2 # Encryption provider to use for the encryption.
    #         # Defines the encryption keys generation and storage method.
    #         keys:
    #             - # Deterministically generated key from the node UUID and PartitionLabel.
    #               nodeID: {}
    #               slot: 0 # Key slot number for LUKS2 encryption.
    #               
    #               # # KMS managed encryption key.
    #               # kms:
    #               #     endpoint: https://192.168.88.21:4443 # KMS endpoint to Seal/Unseal the key.
    #         
    #         # # Cipher kind to use for the encryption. Depends on the encryption provider.
    #         # cipher: aes-xts-plain64

    #         # # Defines the encryption sector size.
    #         # blockSize: 4096

    #         # # Additional --perf parameters for the LUKS2 encryption.
    #         # options:
    #         #     - no_read_workqueue
    #         #     - no_write_workqueue

    # # Configures the udev system.
    # udev:
    #     # List of udev rules to apply to the udev system
    #     rules:
    #         - SUBSYSTEM=="drm", KERNEL=="renderD*", GROUP="44", MODE="0660"

    # # Configures the logging system.
    # logging:
    #     # Logging destination.
    #     destinations:
    #         - endpoint: tcp://1.2.3.4:12345 # Where to send logs. Supported protocols are "tcp" and "udp".
    #           format: json_lines # Logs format.

    # # Configures the kernel.
    # kernel:
    #     # Kernel modules to load.
    #     modules:
    #         - name: brtfs # Module name.

    # # Configures the seccomp profiles for the machine.
    # seccompProfiles:
    #     - name: audit.json # The `name` field is used to provide the file name of the seccomp profile.
    #       # The `value` field is used to provide the seccomp profile.
    #       value:
    #         defaultAction: SCMP_ACT_LOG

    # # Configures the node annotations for the machine.

    # # node annotations example.
    # nodeAnnotations:
    #     customer.io/rack: r13a25

    # # Configures the node taints for the machine. Effect is optional.

    # # node taints example.
    # nodeTaints:
    #     exampleTaint: exampleTaintValue:NoSchedule
# Provides cluster specific configuration options.
cluster:
    id: Pd8Kz-heVQFAyomOEpadiNCIIGJ9ShZMG-pC5EPit1c= # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
    secret: nk9Aw/MCK7KT+nogaO82wCRxAW755U2Bca9HI7ykmPE= # Shared secret of cluster (base64 encoded random 32 bytes).
    allowSchedulingOnControlPlanes: true
    # Provides control plane specific configuration options.
    controlPlane:
        endpoint: https://192.168.0.201:6443 # Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.
    clusterName: dev-cluster # Configures the cluster's name.
    # Provides cluster specific network configuration options.
    network:
        dnsDomain: cluster.local # The domain used by Kubernetes DNS.
        # The pod subnet CIDR.
        podSubnets:
            - 10.244.0.0/16
        # The service subnet CIDR.
        serviceSubnets:
            - 10.96.0.0/12
        
        # # The CNI used.
        # cni:
        #     name: custom # Name of CNI to use.
        #     # URLs containing manifests to apply for the CNI.
        #     urls:
        #         - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml
    token: e96gg0.c2lk16u2o1ukbgzp # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
    secretboxEncryptionSecret: ZRb5QcHu0DHbokEshsODOT21FHyoUfZilPcb70Tkndo= # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
    # The base64 encoded root certificate authority used by Kubernetes.
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpRENDQVMrZ0F3SUJBZ0lRWEREWmVRT2UxMGtOYnJYcTI4akY4REFLQmdncWhrak9QUVFEQWpBVk1STXcKRVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSTBNVEV5TWpFNU1EQXdNRm9YRFRNME1URXlNREU1TURBdwpNRm93RlRFVE1CRUdBMVVFQ2hNS2EzVmlaWEp1WlhSbGN6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCUE96dzc4Z1YxOWRVWVZITERHRG53RW5SWDNoZGxPNHVMZTFVVEVvcWJYY3VpcU9XZ2VseXpEWHVkTnkKdERSZDl1WDhUSFowT2MrUCtkNExVZTRvKzIyallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWRCZ05WSFNVRQpGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFCkZnUVViMUt1RlM4TldkS01EakxLREpLMGoraUI3djR3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnU0hjT2NMVFQKWldqekZ4bUtEZWRjTHI5ZW9RWjhMNkVOWkd6MGNEVG8rcllDSUhtK0ZSb3VseXo3V01wWU5ZZUdORWl0aHB6awpOU3VJSkpBVDJMNnF1SnB0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUpGSXJtdFBzeDN6N0tBT2dhVDB2NmV5VmlUS3VFMmpZdWRXemxUVWtuc0NvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFODdQRHZ5QlhYMTFSaFVjc01ZT2ZBU2RGZmVGMlU3aTR0N1ZSTVNpcHRkeTZLbzVhQjZYTApNTmU1MDNLME5GMzI1ZnhNZG5RNXo0LzUzZ3RSN2lqN2JRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
    aggregatorCA:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJYekNDQVFXZ0F3SUJBZ0lRYXFPUU9pWGpIa0o5L2FzbkxvOGRNekFLQmdncWhrak9QUVFEQWpBQU1CNFgKRFRJME1URXlNakU1TURBd01Gb1hEVE0wTVRFeU1ERTVNREF3TUZvd0FEQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxRwpTTTQ5QXdFSEEwSUFCTzdFeTFmSEZDYU95UFF1c0huS0dtRkQyL200U2t2WEZuYTNvWnNOVldZM0VQaTkxTWxZCnM5ZDFGME1SVDB6UnBEeDFObTRnaExNcjlkMlhiMGNlazFlallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZApCZ05WSFE0RUZnUVVtQ0xxbUdFZGFzc1oydEhrTHlKZktoQlMyZDB3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloCkFKdzk3V0djN0ZYYnlGWEtrM1hNem5xSU5RQkp0eUxQaGNDeG11Ukk0d2Z2QWlCYWVqalJtQ0U4Z0l6bjBNMmwKTVZTeWVCMW9rWVdTbDNnajN5ZGdJQnZBWUE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUszdG96RXF3N3F0WGJnbFM3ZjgvaGR0STBpM3djZGtzWjhqZ0dGeVN6cDBvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFN3NUTFY4Y1VKbzdJOUM2d2Vjb2FZVVBiK2JoS1M5Y1dkcmVobXcxVlpqY1ErTDNVeVZpegoxM1VYUXhGUFROR2tQSFUyYmlDRXN5djEzWmR2Ung2VFZ3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded private key for service account token generation.
    serviceAccount:
        key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcW5oaGNJOVo1VWp1YnFpQmxsRUlaUUhsT2JmbCtydkFVNWJkbUVXVXVRRGRBdWd1CkkyaEx6UkVVTXBkcjR2YTBUK243YzZCNWNhenlXc2R3SWxsNy9udHhVckZVTWVDWnM0K253U2x4Uy9VaVVuQ3oKK2ZBNnhBcmFjclhldk9SdGR1TGMyaDRTNGVmaUxzanVGbEZVVFdLckVBM1prVjhEZXUwUVd6elJJKy9NUEFldQpPWFFJcFhZeW5WeDVZcVhvc045OUVyRzEzR1FhZm1JL2xOQld0ME5ZZURSS2FTdGpVaDZnKzY2Z2lQamI3d3hlCjc4M20ySXhtaEFnbWFxekZKakxnT1Q3QURkU1FuRUtjaG9DcGMvRFlMaW9BbnU5MW9RSHVvNll1NDl5d0tWek0KTVRMNXRXNFJOZmhuK0pXWXQ1WU5jNkg0Vmx4alBSRVRqbDRnd3lRazFZQWk2Sk1zcjdDbVJocnlnM2dTUnJTZApUcjYvOUloSGV5RXRIZ1Q1Z3diRkNZQUlXeU0xNWxGL1RHNjJaeVV6ZVRHb3YyMWFyUlJsaTFTNWY4bjlKWVArCnJFU1JYZTk3S0IyL2lick5PMGducVdxY1l5Y1oyNGNNSW0yblhrRDFSMkZKNktyaUF1eldIUXVmSVJveEQweFYKN3E4N1EzeElaMG9YRVJ2NE5hME1ZTWJIR2p5Q0FKTDg1NkMxaXVmeVB0aFkxL0NYSHhma1pHR3BoczBoS3dIMQo0bWJlZ0MyYXFPeVJnTWFnczdnbW1GS1NPZ1ZMTEVKaHdjN3hyMmxySHI3Uk05TjJSa09DajhJdlR3d2xhdWYwCnNkYVRubkhLWW1JRWE2OWh1emJzbThkQ2x4VEg5NWhiRkkvSzVVYTZ4aEpaeWJBczdqR2VjemZJUGZVQ0F3RUEKQVFLQ0FnQjVjYk54UGg3NzhyNHlSWWUwYjl3OElXS05nUTZ0VnM2SWZtVTEwdlJGN0hDSFhxTm9CQ2hrV25ONgpLMWZuNUh2R3B0bkZvU0NEdElNZjJ3OXUyVE0xcy9taXdNUkxtRWZIbldNVWdKSy9XMDd0VG05WmN5UmFmNlRxCnJkaVYxMktJbk14Yjg2cmVGNVdTWVFFRkUwR3NzOHRNYjZGOUtDUlJrY3ZpUSt4MjNxSXdiZ1JYMSt0RS9YVEgKbUphOWlaYkJVeVpHaUNZWWNaUlNUMm9lZVdJZHd6T214eEh2NU1Jb1Fidk1NYmNhZmJncGtEV2VQNkRpeXZ0Sgp1b2lyM0pQRFIrRm54dVdKdE5LbEQrdDFBdm8xcC9KS3lRK1NLdVF4SlRBK2sraTUyb0lCcGFPdXRUTWladHlLCkI0TUNuSWlrMlppUnRXVTNHVEIxMDlHTHpsRWxxc2xjQWtrTDA1YlJNLzlpQmJXVjZQK3d3OGhjTENXemlBL3YKSWhSVEw5QlFEYkFaY3ljdDhOVlRSVlB0UEEvUk4zWnh6OTRIQ3VOR0ZKNG9YdFVoQ243dklTNGVCTUZrSlFabwpJN25JdE42TFJlTm9nZjgxdllxcEFXNlBXYzl1YVAvS3ZwbTFyd1R5YlYwNmE4dXgvakhOWHNnakhtczJGVEpyCnpPVmNLb3hqWnpzenNuUzRERFJMS2hQazBMWC90Y0ZMWWZkSlJYMUNSSHZZWUNadE9yTWRyK09BYmtOeERpTnQKdmZwRmxxSTNmTnF0MmNQNU1NRkxNZTJwcWQvN3UrRXFoTkR0TlpxNTM0MHU0cGZTVEhWZ2ZxcXV5UlNIdFJlOApqY2xkSFQ0eTlmeWZXVHNyL2JIUHprWGY0VDlsTlhwOGtaTDJ2TVZMVkhnd3YyLzc3UUtDQVFFQXpSY1hqbExVCkNkdDRNQmIydEdJS1EzVWNYeU1FcGZQWStGZXRnbVFhTko0OHd5ZndhRzNtZG9qeEtXQXJ5Qkd1a2Z5ZG9leVEKbE0wZ2lqMUROZjFBdVhaaXhDVkFCTlIxREFyQ2t3Q3h3Vm9NV0dDbEdndGZPdUNhL2FWV0FBQno0amsrWTFZcwpSc2IrZVlEZ3NJMm90TTRjcFFldVdxWE5vY0NGQVZBL212Tk1PeG8wZFJ3STVWblA2LzJrSzJreGNWVk4wam84CndheW1SQVhVbDRMaVFkUElsTVBWVGZEL2lmS3ZNQVVPdkJuUWF6azYrZ21IcUU5QmlnSzdBelpERXQyK0YwWEwKcUs0d3NRbjREMjVkbFlqdzFydFdqWGs4VTJzLyt5dWxaUENaSUdnNGJ5R0g2bzNOeVdqYXE3VXh3V3Yzdkp3aQo3dEpJb1prMTRiVUNLd0tDQVFFQTFNbEpaZURwcGxCVVppcWVXMHg2MEhrVHM5em9scG9kVnc3ZWkrWWc3dzhoCnE0TU1EcmtIYWJRbE9UQjZld0RVZEgwcEMvb3hGc1gyOU1JZTc4YUJncjFEeEJIbkw2QlpUbExKZkswaGdwSFcKcVhnd2xUejlDQ2hrNGpWRDkvZzZnTWlNaDNpU3UyU1RlYWdtK0xlb2oyTmJJdGVuRUdPS0lMdklDUFZENmlZZgpqSUMwMlk4UmZTbjFoVWxwYytQZDYzRDBsTHlPWjBZUUYwNG5nRlZMMlZkWndmd245ejd1SElvSWROWFB4UU5yClR1T2xEUjdaOVVZenVmQ3RGWU8zbHJvVm9TTkxPWFhOYWNVUUZoSU10OTRGbmY3MWpiamlWbGlXNmgrVmNFalUKMGJrY2t5YlpJVHhyYXlmY1l4d3B6dUd4TnNJcGloY0FWTGsxdWsxUVh3S0NBUUFMcUMxWmxKR2l3Y3V5Q0F3YgpzcHJjdkxKUklmOW9vMVNJd1FzR3AwUHFDN2h1YXoyNTRjMUFuWVgva1F6TUFWMUh4UEQ4dkNKM29yVWZ4bDJrCm12RnIyVFBCN0ZBWU5pODA4UU9nTVdEcEdZSXNIOG9pa2RUbTFzOVliV1pXOTYrZWd4eHRydjh6UXFwQ0k3WWgKc3R1TTgwNGpmeTFFejduQllOenVkeTQyVTIvWXlDT0ZLSVBFN1hibzlmQzMydkhKZkV6QkR6aFcxY1paaFc5UQo4VXFFN1ZHd1N2VTd5ZC9zYWxQVXllVE5nalliY2hSTkUrK1cvSEpBTXVtSVJEUkp4VHJCdmVEV2hKZ1Y1L2dtCmdHSm5WbkpCOGtINEpwVHNOT05kRmx6L1FNR2pXdWtpUCtpbXgwcVVFUmFrdmRiSEpLamZHb3pOd0R3S20xZTUKclgwakFvSUJBUUMvSnh3U3M1dnlWbE9iZkVuS0JzaUZvMTg1d3dnRzB1ZnNuMlQ1RklFZGdPQmtiVk5Wbm82MApQS3I3MXpzUWFNeHk0VVVRaDIrMTM1MWNmMDYvWS9wUWNxbi81MzFoNFpDWXRmSmZXRUMwUlVNcjl0YmVHbTNNCitFeTRrZFUvVy9WaVg4Y3VvL2hjODVzd1BRalZnbGVnaUVjRTQrb201T1RmUnhJS1NocjZxOGpIdFkvQnFhNnkKWEJFOTdaY1lEdW43YWZ1dDZqMmJOT3VicEJBRVQ1dlY0WXkyb1VsZDZXQ0tyczJ0OTYyd2RNUGZtTTFiSGczNwpNMWVnZ0Q5ZEJualVwTkp0Y1lGUVd5MXZDU0xNVU9hdi9ublpWNE5NRDN6MHlKeTZNaWxUTjNwSDlSMWdiQk8rCnNjSmwvdWNTK2VmcysvN3hERGU0MzdUaVo0ZUdsNUhOQW9JQkFBOG80YnRub3Fja01ueG5jODdyeWY5T0VULzYKU2IyclpvUDlHS0U4eXUzL1RuQjIvdXRwWUFZNitDTExkT1ovL2c4bjcyS2pGUURNNDEyeUVZdW12QlRWdW40aApVU2ovK3ZqZWxuV3gyaml3M1VwZC9WN0o1MEVxR2dkalFkUkF5SE1EeHpYc2ljMUtQTHBZWEhYZGRocEJFQy85CkNmMW1UaXd1dmFrNStQVlV3SlFDVXQrN1hPaFlPVDJ5RHVIdU5aMHNHMDFyWTBkcWRxMTJjODZJa3NuckFwWUEKNTNoSjFwWUFDRlUrZjlpT3NJaVAyS29iWFkwRVVsallTaCtjdXdkNGxFZGpXaDNsUUc0N3RQRS92dERtTUhyeQorOGxRdnNtMWcrWjY0QTBiMEk0RmxYV0Y3eVZKN1d6dWNUZ2VNRmVLN3dUWXBoSnkreU9TQThQRWRxQT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
    # API server specific configuration options.
    apiServer:
        image: registry.k8s.io/kube-apiserver:v1.31.2 # The container image used in the API server manifest.
        # Extra certificate subject alternative names for the API server's certificate.
        certSANs:
            - 192.168.0.201
        disablePodSecurityPolicy: true # Disable PodSecurityPolicy in the API server and default manifests.
        # Configure the API server admission plugins.
        admissionControl:
            - name: PodSecurity # Name is the name of the admission controller.
              # Configuration is an embedded configuration object to be used as the plugin's
              configuration:
                apiVersion: pod-security.admission.config.k8s.io/v1alpha1
                defaults:
                    audit: restricted
                    audit-version: latest
                    enforce: baseline
                    enforce-version: latest
                    warn: restricted
                    warn-version: latest
                exemptions:
                    namespaces:
                        - kube-system
                    runtimeClasses: []
                    usernames: []
                kind: PodSecurityConfiguration
        # Configure the API server audit policy.
        auditPolicy:
            apiVersion: audit.k8s.io/v1
            kind: Policy
            rules:
                - level: Metadata
    # Controller manager server specific configuration options.
    controllerManager:
        image: registry.k8s.io/kube-controller-manager:v1.31.2 # The container image used in the controller manager manifest.
    # Kube-proxy server-specific configuration options
    proxy:
        image: registry.k8s.io/kube-proxy:v1.31.2 # The container image used in the kube-proxy manifest.
        
        # # Disable kube-proxy deployment on cluster bootstrap.
        # disabled: false
    # Scheduler server specific configuration options.
    scheduler:
        image: registry.k8s.io/kube-scheduler:v1.31.2 # The container image used in the scheduler manifest.
    # Configures cluster member discovery.
    discovery:
        enabled: true # Enable the cluster membership discovery feature.
        # Configure registries used for cluster member discovery.
        registries:
            # Kubernetes registry uses Kubernetes API server to discover cluster members and stores additional information
            kubernetes:
                disabled: true # Disable Kubernetes discovery registry.
            # Service registry is using an external service to push and pull information about cluster members.
            service: {}
            # # External service endpoint.
            # endpoint: https://discovery.talos.dev/
    # Etcd specific configuration options.
    etcd:
        # The `ca` is the root certificate authority of the PKI.
        ca:
            crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmVENDQVNPZ0F3SUJBZ0lRYnRYd3NyVHJXZ1N3aTM3SnNVb0dyVEFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1JsZEdOa01CNFhEVEkwTVRFeU1qRTVNREF3TUZvWERUTTBNVEV5TURFNU1EQXdNRm93RHpFTgpNQXNHQTFVRUNoTUVaWFJqWkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkgzNGhYZkxvcEk5CmdlaTlxK3duZi9iUTJVK25FdFhIOVlVZVRlaDhXMGhCYnl2U2QxRlBmOGlJS3pZemt6TFFEeW9qM0J1c2l6cVoKRGNNVzl5aCtoM3lqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjRApBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVOG1La1ZyTXB6QzhJCm53VHNXR1o4MVZ0UWUra3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBTzYvaEZTUWZjcGpoNURkaHlKTEk0YUUKNFpHdXBKWWFYZXBiWjVNa0NvVENBaUJVZHA5d1k2VlpmUlczUGlJenYxYThPTUJmTzdpcVJHbGhDSGgzU205OQpXZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURRSEpBd1VwM3ZRcUo0ZUt0K1hmak9qTHRMZ282MC90dzVkWjhFSWJZRm1vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFZmZpRmQ4dWlrajJCNkwycjdDZC85dERaVDZjUzFjZjFoUjVONkh4YlNFRnZLOUozVVU5Lwp5SWdyTmpPVE10QVBLaVBjRzZ5TE9wa053eGIzS0g2SGZBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
        
        # # The container image used to create the etcd service.
        # image: gcr.io/etcd-development/etcd:v3.5.16

        # # The `advertisedSubnets` field configures the networks to pick etcd advertised IP from.
        # advertisedSubnets:
        #     - 10.0.0.0/8
    # A list of urls that point to additional manifests.
    extraManifests: []
    #   - https://www.example.com/manifest1.yaml
    #   - https://www.example.com/manifest2.yaml

    # A list of inline Kubernetes manifests.
    inlineManifests: []
    #   - name: namespace-ci # Name of the manifest.
    #     contents: |- # Manifest contents as a string.
    #       apiVersion: v1
    #       kind: Namespace
    #       metadata:
    #       	name: ci

    
    # # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).

    # # Decryption secret example (do not use in production!).
    # aescbcEncryptionSecret: z01mye6j16bspJYtTB/5SFX8j7Ph4JXxM2Xuu4vsBPM=

    # # Core DNS specific configuration options.
    # coreDNS:
    #     image: registry.k8s.io/coredns/coredns:v1.11.3 # The `image` field is an override to the default coredns image.
    
    # # A map of key value pairs that will be added while fetching the extraManifests.
    # extraManifestHeaders:
    #     Token: "1234567"
    #     X-ExtraInfo: info

    # # Settings for admin kubeconfig generation.
    # adminKubeconfig:
    #     certLifetime: 1h0m0s # Admin kubeconfig certificate lifetime (default is 1 year).
